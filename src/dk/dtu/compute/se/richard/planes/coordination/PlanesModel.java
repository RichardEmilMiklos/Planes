/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package dk.dtu.compute.se.richard.planes.coordination;

import org.eclipse.emf.common.util.EList;

import planes.PlanesPackage;
import dk.dtu.compute.se.richard.planes.automata.PlanesAutomata;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class PlanesModel extends EMFPackageAdapter {


	private EventType eventtype_crash;


	private ElementType elementtype_FlyingObject;
	private ElementType elementtype_Field;
	private ElementType elementtype_Bird;
	private ElementType elementtype_Plane;

	private Reference referencetype_FlyingObject_field;
	private Reference referencetype_Field_bird;
	private Reference referencetype_Field_plane;


	private PlanesModel(ExecutionEngine engine) {
		super (new PlanesAutomata(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		PlanesPackage pack = PlanesPackage.eINSTANCE;

		getNamespace().setEPackage(pack);
		getNamespace().setUri("planesecno");


		eventtype_crash = ecno_factory.createEventType();
		eventtype_crash.setName("crash");
		eventtype_crash.setGui(true);
		addEventType(eventtype_crash);



		elementtype_FlyingObject = ecno_factory.createElementType();
		elementtype_FlyingObject.setEClass(pack.getFlyingObject());
		elementtype_FlyingObject.setGui(true);
		addElementType(elementtype_FlyingObject);

		elementtype_Field = ecno_factory.createElementType();
		elementtype_Field.setEClass(pack.getField());
		elementtype_Field.setGui(true);
		addElementType(elementtype_Field);

		elementtype_Bird = ecno_factory.createElementType();
		elementtype_Bird.setEClass(pack.getBird());
		elementtype_Bird.setGui(true);
		addElementType(elementtype_Bird);

		elementtype_Plane = ecno_factory.createElementType();
		elementtype_Plane.setEClass(pack.getPlane());
		elementtype_Plane.setGui(true);
		addElementType(elementtype_Plane);


		elementtype_Bird.setSuper(elementtype_FlyingObject);
		elementtype_Plane.setSuper(elementtype_FlyingObject);

		EList<Reference> references;

		references = elementtype_FlyingObject.getReferences();
		referencetype_FlyingObject_field = ecno_factory.createReference();
		referencetype_FlyingObject_field.setEReference(pack.getFlyingObject_Field());
		referencetype_FlyingObject_field.setTarget(elementtype_Field);
		references.add(referencetype_FlyingObject_field);

		references = elementtype_Field.getReferences();
		referencetype_Field_bird = ecno_factory.createReference();
		referencetype_Field_bird.setEReference(pack.getField_Bird());
		referencetype_Field_bird.setTarget(elementtype_Bird);
		references.add(referencetype_Field_bird);

		referencetype_Field_plane = ecno_factory.createReference();
		referencetype_Field_plane.setEReference(pack.getField_Plane());
		referencetype_Field_plane.setTarget(elementtype_Plane);
		references.add(referencetype_Field_plane);


		Synchronisation synch;
		CoordinationSet cset;

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_crash);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_FlyingObject_field);
		synch.setEventType(eventtype_crash);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_FlyingObject.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_crash);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Field_bird);
		synch.setEventType(eventtype_crash);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Field_plane);
		synch.setEventType(eventtype_crash);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Field.getCoordinationSets().add(cset);

	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		{
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		{
			return null;
		}
	}

	public static PlanesModel getModel(ExecutionEngine engine) {
		return new PlanesModel(engine);
	}

}
